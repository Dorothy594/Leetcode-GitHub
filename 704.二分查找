给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。

Codes:
def binary_search(nums, target):
    length = len(nums)
    i = 0
    j = length - 1
    n = length // 2
    while i <= j:
        if target < nums[n]:
            j = n-1
        elif target > nums[n]:
            i = n+1
        else:
            return n
    return -1


if __name__ == '__main__':
    nums = input()
    target = input()
    binary_search(nums, target)


- 时间复杂度：O(log n)
- 空间复杂度：O(1)

answer:
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums) - 1  # 定义target在左闭右闭的区间里，[left, right]

        while left <= right:
            middle = left + (right - left) // 2
            
            if nums[middle] > target:
                right = middle - 1  # target在左区间，所以[left, middle - 1]
            elif nums[middle] < target:
                left = middle + 1  # target在右区间，所以[middle + 1, right]
            else:
                return middle  # 数组中找到目标值，直接返回下标
        return -1  # 未找到目标值
